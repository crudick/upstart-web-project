// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Upstart.Persistence.Data;

#nullable disable

namespace Upstart.Persistence.Migrations
{
    [DbContext(typeof(UpstartDbContext))]
    [Migration("20250806051441_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Upstart.Persistence.Entitities.LoanEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("APR")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("apr");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("application_date");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approval_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DisbursementDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("disbursement_date");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("interest_rate");

                    b.Property<decimal>("LateFees")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("late_fees");

                    b.Property<decimal>("LoanAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("loan_amount");

                    b.Property<string>("LoanOfficerNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("loan_officer_notes");

                    b.Property<string>("LoanPurpose")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("loan_purpose");

                    b.Property<string>("LoanStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("loan_status");

                    b.Property<DateTime?>("MaturityDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("maturity_date");

                    b.Property<decimal>("MonthlyPayment")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("monthly_payment");

                    b.Property<DateTime?>("NextPaymentDueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_payment_due_date");

                    b.Property<decimal>("OriginationFee")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("origination_fee");

                    b.Property<decimal>("OutstandingBalance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("outstanding_balance");

                    b.Property<string>("PaymentFrequency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("payment_frequency");

                    b.Property<int>("TermMonths")
                        .HasColumnType("integer")
                        .HasColumnName("term_months");

                    b.Property<decimal>("TotalPaymentsMade")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_payments_made");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserEntityId")
                        .HasColumnType("integer")
                        .HasColumnName("user_entity_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_loans");

                    b.HasIndex("UserEntityId")
                        .HasDatabaseName("ix_loans_user_entity_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_loans_user_id");

                    b.ToTable("loans", (string)null);
                });

            modelBuilder.Entity("Upstart.Persistence.Entitities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address_line_1");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address_line_2");

                    b.Property<decimal?>("AnnualIncome")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("annual_income");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreditScore")
                        .HasColumnType("integer")
                        .HasColumnName("credit_score");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("EmploymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("employment_status");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("SocialSecurityNumber")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("social_security_number");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("state");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Upstart.Persistence.Entitities.LoanEntity", b =>
                {
                    b.HasOne("Upstart.Persistence.Entitities.UserEntity", null)
                        .WithMany("Loans")
                        .HasForeignKey("UserEntityId")
                        .HasConstraintName("fk_loans_users_user_entity_id");

                    b.HasOne("Upstart.Persistence.Entitities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_loans_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Upstart.Persistence.Entitities.UserEntity", b =>
                {
                    b.Navigation("Loans");
                });
#pragma warning restore 612, 618
        }
    }
}
