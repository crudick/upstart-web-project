// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Upstart.Persistence.Data;

#nullable disable

namespace Upstart.Persistence.Migrations
{
    [DbContext(typeof(UpstartDbContext))]
    partial class UpstartDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Upstart.Persistence.Entitities.PollAnswerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("answer_text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<int>("PollId")
                        .HasColumnType("integer")
                        .HasColumnName("poll_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_poll_answers");

                    b.HasIndex("PollId")
                        .HasDatabaseName("ix_poll_answers_poll_id");

                    b.ToTable("poll_answers", (string)null);
                });

            modelBuilder.Entity("Upstart.Persistence.Entitities.PollEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsMultipleChoice")
                        .HasColumnType("boolean")
                        .HasColumnName("is_multiple_choice");

                    b.Property<string>("PollGuid")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("poll_guid");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("question");

                    b.Property<bool>("RequiresAuthentication")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_authentication");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_polls");

                    b.HasIndex("PollGuid")
                        .IsUnique()
                        .HasDatabaseName("ix_polls_poll_guid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_polls_user_id");

                    b.ToTable("polls", (string)null);
                });

            modelBuilder.Entity("Upstart.Persistence.Entitities.PollStatEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PollAnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("poll_answer_id");

                    b.Property<int>("PollId")
                        .HasColumnType("integer")
                        .HasColumnName("poll_id");

                    b.Property<DateTime>("SelectedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("selected_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_poll_stats");

                    b.HasIndex("PollAnswerId")
                        .HasDatabaseName("ix_poll_stats_poll_answer_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_poll_stats_user_id");

                    b.HasIndex("PollId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_poll_stats_poll_id_user_id");

                    b.ToTable("poll_stats", (string)null);
                });

            modelBuilder.Entity("Upstart.Persistence.Entitities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Upstart.Persistence.Entitities.PollAnswerEntity", b =>
                {
                    b.HasOne("Upstart.Persistence.Entitities.PollEntity", "Poll")
                        .WithMany("Answers")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_poll_answers_polls_poll_id");

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("Upstart.Persistence.Entitities.PollEntity", b =>
                {
                    b.HasOne("Upstart.Persistence.Entitities.UserEntity", "User")
                        .WithMany("Polls")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_polls_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Upstart.Persistence.Entitities.PollStatEntity", b =>
                {
                    b.HasOne("Upstart.Persistence.Entitities.PollAnswerEntity", "PollAnswer")
                        .WithMany("Stats")
                        .HasForeignKey("PollAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_poll_stats_poll_answers_poll_answer_id");

                    b.HasOne("Upstart.Persistence.Entitities.PollEntity", "Poll")
                        .WithMany("Stats")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_poll_stats_polls_poll_id");

                    b.HasOne("Upstart.Persistence.Entitities.UserEntity", "User")
                        .WithMany("PollStats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_poll_stats_users_user_id");

                    b.Navigation("Poll");

                    b.Navigation("PollAnswer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Upstart.Persistence.Entitities.PollAnswerEntity", b =>
                {
                    b.Navigation("Stats");
                });

            modelBuilder.Entity("Upstart.Persistence.Entitities.PollEntity", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("Upstart.Persistence.Entitities.UserEntity", b =>
                {
                    b.Navigation("PollStats");

                    b.Navigation("Polls");
                });
#pragma warning restore 612, 618
        }
    }
}
